{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/trees/WorkbenchTreeDataProvider.ts", "../src/trees/items/WorkbenchTreeItem.ts", "../src/trees/items/WorkbenchRequestTreeItem.ts", "../src/workbenches/requests/WorkbenchRequest.ts", "../src/interfaces/workbenches/requests/utils/WorkbenchRequestDataTypeValidations.ts", "../src/panels/RequestWebviewPanel.ts", "../src/utils/GetWebviewUri.ts", "../src/workbenches/requests/WorkbenchHttpRequest.ts", "../src/trees/items/WorkbenchCollectionTreeItem.ts", "../src/Workbenches.ts", "../src/workbenches/Workbench.ts", "../src/workbenches/collections/WorkbenchCollection.ts", "../src/utils/GetRootPath.ts", "../src/commands/collections/CreateCollectionCommand.ts", "../src/commands/requests/CreateRequestCommand.ts", "../src/commands/requests/OpenRequestCommand.ts", "../src/commands/workbenches/CreateWorkbenchCommand.ts", "../src/utils/GetWorkbenchStorageOption.ts", "../src/utils/GetUniqueFolderPath.ts", "../src/utils/GetCamelizedString.ts", "../src/commands/responses/OpenResponseCommand.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport WorkbenchTreeDataProvider from './trees/WorkbenchTreeDataProvider';\nimport { scanForWorkbenches } from './Workbenches';\nimport CreateCollectionCommand from './commands/collections/CreateCollectionCommand';\nimport CreateRequestCommand from './commands/requests/CreateRequestCommand';\nimport OpenRequestCommand from './commands/requests/OpenRequestCommand';\nimport CreateWorkbenchCommand from './commands/workbenches/CreateWorkbenchCommand';\nimport OpenResponseCommand from './commands/responses/OpenResponseCommand';\nimport { getWebviewUri } from './utils/GetWebviewUri';\nimport { readFileSync } from 'fs';\nimport path from 'path';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"integrationworkbench\" is now active!');\n\n\tconst workbenchesTreeDataProvider = new WorkbenchTreeDataProvider(context);\n\n\tvscode.window.registerWebviewViewProvider(\"response\", {\n\t\tresolveWebviewView: (webviewView, _context, _token) => {\n\t\t\twebviewView.webview.options = {\n\t\t\t\tenableScripts: true,\n\t\t\t\t\n        localResourceRoots: [\n          vscode.Uri.joinPath(context.extensionUri, 'build'),\n          vscode.Uri.joinPath(context.extensionUri, 'resources')\n        ]\n\t\t\t};\n\n\t\t\tconst webviewUri = getWebviewUri(webviewView.webview, context.extensionUri, [\"build\", \"webviews\", \"response.js\"]);\n\t\t\tconst styleUri = getWebviewUri(webviewView.webview, context.extensionUri, [\"resources\", \"request\", \"styles\", \"response.css\"]);\n\t\t\tconst shikiUri = getWebviewUri(webviewView.webview, context.extensionUri, [\"resources\", \"shiki\"]);\n\n\t\t\twebviewView.webview.html = `\n\t\t\t\t<!DOCTYPE html>\n\t\t\t\t<html lang=\"en\">\n\t\t\t\t\t<head>\n\t\t\t\t\t\t<meta charset=\"UTF-8\"/>\n\t\n\t\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"/>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<title>Hello World!</title>\n\t\n\t\t\t\t\t\t<link rel=\"stylesheet\" href=\"${styleUri}\"/>\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\t\t\t\t\t\t${readFileSync(\n\t\t\t\t\t\t\tpath.join(__filename, \"..\", \"..\", \"resources\", \"request\", \"response.html\"),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tencoding: \"utf-8\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\n\t\t\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t\t\twindow.shikiUri = \"${shikiUri}\";\n\t\t\t\t\t\t\twindow.activeColorThemeKind = \"${vscode.window.activeColorTheme.kind}\";\n\t\t\t\t\t\t</script>\n\t\n\t\t\t\t\t\t<script type=\"module\" src=\"${webviewUri}\"></script>\n\t\t\t\t\t</body>\n\t\t\t\t</html>\n\t\t\t`;\n\t\t}\n\t});\n\t\n\tconst workbenchTreeView = vscode.window.createTreeView('workbenches', {\n\t\ttreeDataProvider: workbenchesTreeDataProvider\n\t});\n\t\n\tnew CreateCollectionCommand(context);\n\t\n\tnew CreateRequestCommand(context);\n\tnew OpenRequestCommand(context);\n\n\tnew OpenResponseCommand(context);\n\n\tnew CreateWorkbenchCommand(context);\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.refreshWorkbenches', () => {\n\t\tworkbenchesTreeDataProvider.refresh();\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.openWalkthrough', () => {\n\t\tvscode.commands.executeCommand(`workbench.action.openWalkthrough`, `nora-soderlund.integrationWorkbench#workbenches.openWorkbenches`, false);\n\t}));\n\n\tscanForWorkbenches(context);\n\n\t//vscode.window.registerTreeDataProvider('workbenches', new WorkbenchTreeDataProvider(rootPath));\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n", "import { TreeDataProvider, TreeItem, Event, EventEmitter, ExtensionContext } from 'vscode';\nimport WorkbenchTreeItem from './items/WorkbenchTreeItem';\nimport WorkbenchRequestTreeItem from './items/WorkbenchRequestTreeItem';\nimport WorkbenchCollectionTreeItem from './items/WorkbenchCollectionTreeItem';\nimport { scanForWorkbenches } from '../Workbenches';\n\nexport default class WorkbenchTreeDataProvider implements TreeDataProvider<WorkbenchTreeItem> {\n  constructor(\n    private readonly context: ExtensionContext\n  ) {\n\n  }\n\n  getTreeItem(element: WorkbenchTreeItem): TreeItem {\n    return element;\n  }\n\n  getChildren(element?: WorkbenchTreeItem): Thenable<WorkbenchTreeItem[]> {\n    if (!element) {\n      return Promise.resolve(\n        scanForWorkbenches(this.context, false).map((workbench) =>\n          new WorkbenchTreeItem(workbench)\n        )\n      );\n    }\n    else {\n      if (element instanceof WorkbenchCollectionTreeItem) {\n        return Promise.resolve(\n          element.collection.requests.map((request) => (\n            new WorkbenchRequestTreeItem(element.workbench, request, element.collection)\n          ))\n        );\n      }\n      else if (element instanceof WorkbenchTreeItem) {\n        return Promise.resolve(\n          element.workbench.collections.map((collection) => (\n            new WorkbenchCollectionTreeItem(element.workbench, collection)\n          ))\n        );\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  private _onDidChangeTreeData: EventEmitter<WorkbenchTreeItem | undefined | null | void> = new EventEmitter<WorkbenchTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: Event<WorkbenchTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n}\n", "import { TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport { Workbench } from \"../../workbenches/Workbench\";\n\nexport default class WorkbenchTreeItem extends TreeItem {\n    constructor(\n      public readonly workbench: Workbench\n    ) {\n      super(workbench.name, TreeItemCollapsibleState.Expanded);\n      \n      this.tooltip = `${workbench.name} workbench`;\n      this.description = workbench.storage.base;\n\n      this.contextValue = \"workbench\";\n    }\n}", "import { ThemeIcon, TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport WorkbenchTreeItem from \"./WorkbenchTreeItem\";\nimport { Workbench } from \"../../workbenches/Workbench\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\nimport WorkbenchRequest from \"../../workbenches/requests/WorkbenchRequest\";\nimport { WorkbenchCollection } from \"../../workbenches/collections/WorkbenchCollection\";\nimport WorkbenchHttpRequest from \"../../workbenches/requests/WorkbenchHttpRequest\";\n\nexport default class WorkbenchRequestTreeItem extends TreeItem implements WorkbenchTreeItem {\n  constructor(\n    public readonly workbench: Workbench,\n    public readonly request: WorkbenchRequest,\n    public readonly collection?: WorkbenchCollection\n  ) {\n    super(request.name, TreeItemCollapsibleState.None);\n\n    this.tooltip = `${request.name} request`;\n\n    this.iconPath = this.getIconPath();\n\n    this.command = {\n      title: \"Open request\",\n      command: \"integrationWorkbench.openRequest\",\n      arguments: [workbench, request, collection]\n    };\n  }\n\n  getIconPath() {\n    if (this.request instanceof WorkbenchHttpRequest) {\n      if (this.request.data.method) {\n        const iconPath = path.join(__filename, '..', '..', 'resources', 'icons', 'methods', `${this.request.data.method}.png`);\n\n        if (existsSync(iconPath)) {\n          return {\n            light: iconPath,\n            dark: iconPath\n          };\n        }\n      }\n    }\n\n    return new ThemeIcon(\"search-show-context\");\n  }\n}\n", "import { ExtensionContext, commands } from \"vscode\";\nimport { WorkbenchRequestData } from \"../../interfaces/workbenches/requests/WorkbenchRequestData\";\nimport { isHttpRequestData } from \"../../interfaces/workbenches/requests/utils/WorkbenchRequestDataTypeValidations\";\nimport { RequestWebviewPanel } from \"../../panels/RequestWebviewPanel\";\nimport HttpRequest from \"./WorkbenchHttpRequest\";\n\nexport default class WorkbenchRequest {\n  id: string;\n  name: string;\n\n  private requestWebviewPanel?: RequestWebviewPanel;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n\n  getData(): WorkbenchRequestData {\n    return {\n      id: this.id,\n      name: this.name,\n      type: \"HTTP\",\n      data: {}\n    };\n  }\n\n  static fromData(data: WorkbenchRequestData) {\n    if(isHttpRequestData(data)) {\n      return HttpRequest.fromData(data);\n    }\n\n    throw new Error(\"Tried to parse invalid request type.\");\n  }\n\n  send() {\n    throw new Error(\"Not implemented.\");\n  }\n\n  showWebviewPanel(context: ExtensionContext) {\n    if(!this.requestWebviewPanel) {\n      this.requestWebviewPanel = new RequestWebviewPanel(context, this);\n    }\n    else {\n      this.requestWebviewPanel.reveal();\n    }\n\t\t\n    commands.executeCommand(\"integrationWorkbench.openResponse\", this);\n  }\n};\n", "import { WorkbenchHttpRequestData } from \"../WorkbenchHttpRequestData\";\n\nexport function isHttpRequestData(requestData: Record<string, unknown>): requestData is WorkbenchHttpRequestData {\n  return requestData.type === \"HTTP\";\n}\n", "import { Disposable, ExtensionContext, Uri, ViewColumn, WebviewPanel, TextDocument, window, workspace } from \"vscode\";\nimport { Workbench } from \"../workbenches/Workbench\";\nimport { getWebviewUri } from \"../utils/GetWebviewUri\";\nimport getWebviewNonce from \"../utils/GetWebviewNonce\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\nimport WorkbenchRequest from \"../workbenches/requests/WorkbenchRequest\";\n\nexport class RequestWebviewPanel {\n  private readonly webviewPanel: WebviewPanel;\n  private readonly disposables: Disposable[] = [];\n\n  constructor(\n    private readonly context: ExtensionContext,\n\t\tprivate readonly request: WorkbenchRequest\n  ) {\n    this.webviewPanel = window.createWebviewPanel(\n      \"integrationWorkbench.request\",\n      request.name,\n      ViewColumn.One,\n      {\n        enableScripts: true,\n\n        localResourceRoots: [\n          Uri.joinPath(context.extensionUri, 'build'),\n          Uri.joinPath(context.extensionUri, 'resources')\n        ]\n      }\n    );\n\n    const outputChannel = window.createOutputChannel(`${request.name}`, \"json\");\n\n    outputChannel.replace(\n      JSON.stringify(\n        {\n          message: \"Hello world\"\n        },\n        undefined,\n        2\n      )\n    );\n\n    outputChannel.show();\n\n    this.webviewPanel.onDidDispose(() => this.dispose(), null, this.disposables);\n\n    const webviewUri = getWebviewUri(this.webviewPanel.webview, context.extensionUri, [\"build\", \"webviews\", \"request.js\"]);\n    const styleUri = getWebviewUri(this.webviewPanel.webview, context.extensionUri, [\"resources\", \"request\", \"styles\", \"request.css\"]);\n    const shikiUri = getWebviewUri(this.webviewPanel.webview, context.extensionUri, [\"resources\", \"shiki\"]);\n\n    this.webviewPanel.webview.html = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\"/>\n\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"/>\n          \n          <title>Hello World!</title>\n\n          <link rel=\"stylesheet\" href=\"${styleUri}\"/>\n        </head>\n        <body>\n          ${readFileSync(\n            path.join(__filename, \"..\", \"..\", \"resources\", \"request\", \"request.html\"),\n            {\n              encoding: \"utf-8\"\n            }\n          )}\n\n          <script type=\"text/javascript\">\n            window.shikiUri = \"${shikiUri}\";\n          </script>\n\n          <script type=\"module\" src=\"${webviewUri}\"></script>\n        </body>\n      </html>\n    `;\n\n\n    this.webviewPanel.webview.onDidReceiveMessage(\n      (message: any) => {\n        const command = message.command;\n        const text = message.text;\n\n        switch (command) {\n          case \"sendRequest\": {\n\n            return;\n          }\n        }\n      },\n      undefined,\n      this.disposables\n    );\n  }\n\n  reveal() {\n    const columnToShowIn = window.activeTextEditor ? window.activeTextEditor.viewColumn : undefined;\n\n    this.webviewPanel.reveal(columnToShowIn);\n  }\n\n  dispose() {\n    this.webviewPanel.dispose();\n\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}", "import { Uri, Webview } from \"vscode\";\n\nexport function getWebviewUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n}\n", "import { WorkbenchHttpRequestData } from \"../../interfaces/workbenches/requests/WorkbenchHttpRequestData\";\nimport WorkbenchRequest from \"./WorkbenchRequest\";\n\nexport default class WorkbenchHttpRequest extends WorkbenchRequest {\n  constructor(\n    id: string,\n    name: string,\n    public data: WorkbenchHttpRequestData[\"data\"]\n  ) {\n    super(id, name);\n  }\n\n  getData(): WorkbenchHttpRequestData {\n    return {\n      id: this.id,\n      name: this.name,\n      type: \"HTTP\",\n      data: this.data\n    };\n  }\n  \n  static fromData(data: WorkbenchHttpRequestData) {\n    return new WorkbenchHttpRequest(data.id, data.name, data.data);\n  }\n\n  send(): void {\n    \n  }\n}", "import { ThemeIcon, TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport WorkbenchTreeItem from \"./WorkbenchTreeItem\";\nimport { Workbench } from \"../../workbenches/Workbench\";\nimport { WorkbenchCollection } from \"../../workbenches/collections/WorkbenchCollection\";\n\nexport default class WorkbenchCollectionTreeItem extends TreeItem implements WorkbenchTreeItem {\n    constructor(\n        public readonly workbench: Workbench,\n        public readonly collection: WorkbenchCollection\n    ) {\n      super(collection.name, TreeItemCollapsibleState.Expanded);\n      this.tooltip = `${collection.name} collection`;\n\n      this.contextValue = \"collection\";\n    }\n  \n    iconPath = new ThemeIcon(\"folder\");\n}\n", "import { ExtensionContext, commands } from \"vscode\";\nimport { Workbench } from \"./workbenches/Workbench\";\nimport { existsSync, readFileSync, readdirSync } from \"fs\";\nimport path from \"path\";\nimport getRootPath from \"./utils/GetRootPath\";\n\nexport const workbenches: Workbench[] = [];\n\nexport function scanForWorkbenches(context: ExtensionContext, refresh: boolean = true) {\n  const folders: string[] = [];\n\n  const rootPaths = [\n    context.globalStorageUri.fsPath,\n    getRootPath()\n  ];\n\n  for(let rootPath of rootPaths) {\n    if(!rootPath) {\n      continue;\n    }\n\n    if(!existsSync(path.join(rootPath, \".workbench\"))) {\n      continue;\n    }\n\n    const files = readdirSync(path.join(rootPath, \".workbench\"));\n\n    for(let file of files) {\n      if(existsSync(path.join(rootPath, \".workbench\", file, \"workbench.json\"))) {\n        folders.push(path.join(rootPath, \".workbench\", file));\n      }\n    }\n  }\n\n  workbenches.length = 0;\n  workbenches.push(...folders.map((folder) => {\n    const content = readFileSync(path.join(folder, \"workbench.json\"), {\n      encoding: \"utf-8\"\n    });\n\n    const input = JSON.parse(content);\n\n    return new Workbench(input, folder);\n  }));\n\n  if(refresh) {\n    commands.executeCommand(`integrationWorkbench.refreshWorkbenches`);\n  }\n\n  return workbenches;\n};\n", "import { existsSync, mkdirSync, writeFileSync } from \"fs\";\nimport { WorkbenchStorage } from \"../interfaces/workbenches/WorkbenchStorage\";\nimport { window } from \"vscode\";\nimport path from \"path\";\nimport { WorkbenchData } from \"../interfaces/workbenches/WorkbenchData\";\nimport { WorkbenchCollection } from \"./collections/WorkbenchCollection\";\n\nexport class Workbench {\n    name: string;\n    storage: WorkbenchStorage;\n    collections: WorkbenchCollection[];\n\n    constructor(data: WorkbenchData, private readonly path: string) {\n        this.name = data.name;\n        this.storage = data.storage;\n\n        this.collections = data.collections.map((collection) => new WorkbenchCollection(collection.name, collection.requests));\n    };\n\n    getMetadataPath() {\n        return path.join(this.path, \"workbench.json\");\n    }\n\n    getData(): WorkbenchData {\n        return {\n            name: this.name,\n            storage: this.storage,\n            collections: this.collections.map((collection) => collection.getData())\n        };\n    }\n\n    save() {\n        try {\n            if(!existsSync(this.path)) {\n                mkdirSync(this.path, {\n                    recursive: true\n                });\n            }\n        }\n        catch(error) {\n            window.showErrorMessage(\"VS Code may not have permissions to create files in the current workspace folder:\\n\\n\" + error);\n        }\n\n        try {\n            writeFileSync(this.getMetadataPath(), JSON.stringify(this.getData(), undefined, 2));\n        }\n        catch(error) {\n            window.showErrorMessage(`Failed to save workbench '${this.name}':\\n\\n` + error);\n        }\n    };\n};\n", "import { WorkbenchCollectionData } from \"../../interfaces/workbenches/collections/WorkbenchCollectionData\";\nimport { WorkbenchRequestData } from \"../../interfaces/workbenches/requests/WorkbenchRequestData\";\nimport WorkbenchRequest from \"../requests/WorkbenchRequest\";\n\nexport class WorkbenchCollection {\n  name: string;\n  requests: WorkbenchRequest[];\n\n  constructor(\n    name: string,\n    requests: WorkbenchRequestData[]\n  ) {\n    this.name = name;\n    this.requests = requests.map((request) => WorkbenchRequest.fromData(request));\n  }\n\n  getData(): WorkbenchCollectionData {\n    return {\n      name: this.name,\n      requests: this.requests.map((request) => request.getData())\n    };\n  }\n}", "import { workspace } from \"vscode\";\n\nexport default function getRootPath() {\n  if(workspace.workspaceFolders?.length) {\n    return workspace.workspaceFolders[0].uri.fsPath;\n  }\n\n  return undefined;\n};\n", "import { ExtensionContext, commands, window } from \"vscode\";\nimport WorkbenchTreeItem from \"../../trees/items/WorkbenchTreeItem\";\nimport { WorkbenchCollection } from \"../../workbenches/collections/WorkbenchCollection\";\n\nexport default class CreateCollectionCommand {\n  constructor(private readonly context: ExtensionContext) {\n    context.subscriptions.push(\n      commands.registerCommand('integrationWorkbench.createCollection', this.handle.bind(this))\n    );\n  }\n  \n  async handle(reference: unknown) {\n    window.showInformationMessage('Create collection');\n\n    window.showInputBox({\n      prompt: \"Enter a collection name\",\n      validateInput(value) {\n        if(!value.length) {\n          return \"You must enter a collection name or cancel.\";\n        }\n\n        return null;\n      },\n    }).then((value) => {\n      if(!value) {\n        return;\n      }\n\n      if(reference instanceof WorkbenchTreeItem) {\n        reference.workbench.collections.push(\n          new WorkbenchCollection(value, [])\n        );\n\n        reference.workbench.save();\n\n        commands.executeCommand(\"integrationWorkbench.refreshWorkbenches\");\n      }\n    });\n  }\n}\n", "import { ExtensionContext, commands, window } from \"vscode\";\nimport WorkbenchCollectionTreeItem from \"../../trees/items/WorkbenchCollectionTreeItem\";\nimport { randomUUID } from \"crypto\";\nimport WorkbenchRequest from \"../../workbenches/requests/WorkbenchRequest\";\nimport WorkbenchHttpRequest from \"../../workbenches/requests/WorkbenchHttpRequest\";\n\nexport default class CreateRequestCommand {\n  constructor(private readonly context: ExtensionContext) {\n    context.subscriptions.push(\n      commands.registerCommand('integrationWorkbench.createRequest', this.handle.bind(this))\n    );\n  }\n  \n  async handle(reference: unknown) {\n    window.showInformationMessage('Create request');\n\n    window.showInputBox({\n      prompt: \"Enter the request name\",\n      validateInput(value) {\n        if(!value.length) {\n          return \"You must enter a name or cancel.\";\n        }\n\n        return null;\n      },\n    }).then((value) => {\n      if(!value) {\n        return;\n      }\n\n      if(reference instanceof WorkbenchCollectionTreeItem) {\n        reference.collection.requests.push(\n          new WorkbenchHttpRequest(randomUUID(), value, {\n            method: \"GET\",\n            url: \"https://httpbin.org/get\"\n          })\n        );\n\n        reference.workbench.save();\n\n        commands.executeCommand(\"integrationWorkbench.refreshWorkbenches\");\n      }\n    });\n  }\n}\n", "import { Command, ExtensionContext, commands } from \"vscode\";\nimport { Workbench } from \"../../workbenches/Workbench\";\nimport { RequestWebviewPanel } from \"../../panels/RequestWebviewPanel\";\nimport WorkbenchRequest from \"../../workbenches/requests/WorkbenchRequest\";\nimport { WorkbenchCollection } from \"../../workbenches/collections/WorkbenchCollection\";\n\nexport default class OpenRequestCommand {\n  constructor(private readonly context: ExtensionContext) {\n    context.subscriptions.push(\n      commands.registerCommand('integrationWorkbench.openRequest', this.handle.bind(this))\n    );\n  }\n  \n  async handle(\n    workbench: Workbench,\n    request: WorkbenchRequest,\n    collection?: WorkbenchCollection\n  ) {\n    request.showWebviewPanel(this.context);\n  };\n}\n", "import { ExtensionContext, commands, window } from \"vscode\";\nimport getWorkbenchStorageOption from \"../../utils/GetWorkbenchStorageOption\";\nimport getUniqueFolderPath from \"../../utils/GetUniqueFolderPath\";\nimport getCamelizedString from \"../../utils/GetCamelizedString\";\nimport getRootPath from \"../../utils/GetRootPath\";\nimport { Workbench } from \"../../workbenches/Workbench\";\nimport path from \"path\";\nimport { workbenches } from \"../../Workbenches\";\n\nexport default class CreateWorkbenchCommand {\n  constructor(private readonly context: ExtensionContext) {\n    context.subscriptions.push(\n      commands.registerCommand('integrationWorkbench.createWorkbench', this.handle.bind(this))\n    );\n  }\n  \n  async handle() {\n    window.showInformationMessage('Create workbench');\n\n    const name = await window.showInputBox({\n      placeHolder: \"Enter the name of this workbench:\",\n  \n      validateInput(value) {\n        if(!value.length) {\n          return \"You must enter a name for this workbench!\";\n        }\n  \n        return null;\n      },\n    });\n  \n    if(!name) {\n      return;\n    }\n  \n    const storageOption = await getWorkbenchStorageOption(this.context, name);\n  \n    if(!storageOption) {\n      return;\n    }\n  \n    const uniqueWorkbenchPath = getUniqueFolderPath(storageOption.path, getCamelizedString(name));\n  \n    if(!uniqueWorkbenchPath) {\n      window.showErrorMessage(\"There is too many workbenches with the same name in this storage option, please choose a different name.\");\n  \n      return null;\n    }\n  \n    const rootPath = getRootPath();\n  \n    const workbench = new Workbench({\n      name,\n      storage: {\n        location: storageOption.location,\n        base: (rootPath)?(path.basename(rootPath)):(undefined)\n      },\n      collections: []\n    }, uniqueWorkbenchPath);\n  \n    workbench.save();\n  \n    workbenches.push(workbench);\n  \n    commands.executeCommand(\"integrationWorkbench.refreshWorkbenches\");\n  };\n}\n", "import { ExtensionContext, Uri, window, workspace } from \"vscode\";\nimport { DefaultWorkbenchStorage } from \"../interfaces/configuration/DefaultWorkbenchStorage\";\nimport getRootPath from \"./GetRootPath\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport path from \"path\";\n\nexport default async function getWorkbenchStorageOption(context: ExtensionContext, name: string) {\n  let workbenchStorage = workspace.getConfiguration(\"integrationWorkbench\").get<DefaultWorkbenchStorage>(\"defaultWorkbenchStorage\");\n  let workbenchStoragePath: Uri;\n\n  if(!workbenchStorage || workbenchStorage === \"prompt\") {\n\t\tconst options = [\n\t\t\t\"Repository workbench (stored in the repository filesystem)\",\n\t\t\t\"User workbench (stored in the VS Code user storage)\"\n\t\t];\n\n    const result = await window.showQuickPick(options, {\n\t\t\tcanPickMany: false,\n\t\t\tplaceHolder: \"Select where the workbench files should be saved:\"\n\t\t});\n\n    if(!result) {\n      return null;\n    }\n\n    switch(result) {\n      case \"Repository workbench (stored in the repository filesystem)\": {\n        workbenchStorage = \"repository\";\n\n        break;\n      }\n\n      case \"User workbench (stored in the VS Code user storage)\": {\n        workbenchStorage = \"user\";\n\n        break;\n      }\n\n      default:\n        throw new Error(\"Unexpected result from workbench storage option was given: \" + result);\n    }\n  }\n\n  if(workbenchStorage === \"repository\") {\n    /*const result = await window.showOpenDialog({\n      canSelectFiles: false,\n      canSelectFolders: true,\n      canSelectMany: false,\n      openLabel: \"Select\",\n      title: \"Where do you want the workbench files to be saved?\"\n    });*/\n\n    const rootPath = getRootPath();\n\n    if(!rootPath) {\n      const result = await window.showSaveDialog({\n        defaultUri: Uri.file(`/.workbench/${name.toLocaleLowerCase()}/`),\n        saveLabel: \"Select\"\n      });\n\n      if(!result) {\n        return null;\n      }\n\n      workbenchStoragePath = result;\n    }\n    else {\n      workbenchStoragePath = Uri.file(rootPath);\n    }\n  }\n  else if(workbenchStorage === \"user\") {\n    workbenchStoragePath = context.globalStorageUri;\n  }\n  else {\n    throw new Error(\"Invalid workbench storage option was given: \" + workbenchStorage);\n  }\n\n  const workbenchesPath = path.join(workbenchStoragePath.fsPath, \".workbench/\");\n\n  try {\n    if(!existsSync(workbenchesPath)) {\n      mkdirSync(workbenchesPath, {\n        recursive: true\n      });\n    }\n  }\n  catch(error) {\n    window.showErrorMessage(\"VS Code may not have permissions to create files in the current workspace folder:\\n\\n\" + error);\n\n    return null;\n  }\n\n  return {\n    location: workbenchStorage,\n    path: workbenchesPath\n  };\n}\n", "import { existsSync } from \"fs\";\nimport path from \"path\";\nimport { window, workspace } from \"vscode\";\n\nexport default function getUniqueFolderPath(rootPath: string, folderName: string) {\n  let currentPath = path.join(rootPath, folderName);\n\n  if(!existsSync(currentPath)) {\n    return currentPath;\n  }\n\n  for(let index = 1; index < 20; index++) {\n    currentPath = path.join(rootPath, folderName + \"-\" + index);\n\n    if(!existsSync(currentPath)) {\n      return currentPath;\n    }\n  }\n\n  return null;\n}\n", "// Authored by Christian C. Salvad\u00F3\n// https://stackoverflow.com/a/2970667/20073186\nexport default function getCamelizedString(string: string) {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n    if(index === 0) {\n      return word.toLowerCase();\n    }\n\n    return word.toUpperCase();\n  }).replace(/\\s+/g, '');\n};\n", "import { ExtensionContext, commands } from \"vscode\";\nimport { Workbench } from \"../../workbenches/Workbench\";\nimport WorkbenchRequest from \"../../workbenches/requests/WorkbenchRequest\";\nimport { WorkbenchCollection } from \"../../workbenches/collections/WorkbenchCollection\";\n\nexport default class OpenResponseCommand {\n  constructor(private readonly context: ExtensionContext) {\n    context.subscriptions.push(\n      commands.registerCommand('integrationWorkbench.openResponse', this.handle.bind(this))\n    );\n  }\n  \n  async handle(\n    request: WorkbenchRequest\n  ) {\n    \n  };\n}\n"],
  "mappings": "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",
  "names": ["import_vscode", "import_vscode", "import_path", "import_fs", "import_vscode", "import_vscode", "import_vscode", "path", "path", "import_vscode", "import_vscode", "import_fs", "import_vscode", "import_path", "path", "import_fs", "import_path", "import_vscode", "path", "import_vscode", "import_vscode", "import_vscode", "import_vscode", "import_vscode", "import_fs", "import_path", "path", "import_fs", "import_path", "path", "import_path", "path", "import_vscode", "import_fs", "import_path", "path"]
}

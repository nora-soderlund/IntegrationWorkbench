{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/trees/WorkbenchTreeDataProvider.ts", "../src/trees/items/WorkbenchTreeItem.ts", "../src/trees/items/WorkbenchRequestTreeItem.ts", "../src/trees/items/WorkbenchCollectionTreeItem.ts", "../src/Workbenches.ts", "../src/interfaces/workbenches/Workbench.ts", "../src/utils/GetRootPath.ts", "../src/utils/GetWorkbenchStorageOption.ts", "../src/utils/GetUniqueFolderPath.ts", "../src/utils/GetCamelizedString.ts", "../src/panels/RequestWebviewPanel.ts", "../src/utils/GetWebviewUri.ts", "../src/utils/GetWebviewNonce.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport WorkbenchTreeDataProvider from './trees/WorkbenchTreeDataProvider';\nimport WorkbenchCollectionTreeItem from './trees/items/WorkbenchCollectionTreeItem';\nimport WorkbenchTreeItem from './trees/items/WorkbenchTreeItem';\nimport getWorkbenchStorageOption from './utils/GetWorkbenchStorageOption';\nimport getUniqueFolderPath from './utils/GetUniqueFolderPath';\nimport getCamelizedString from './utils/GetCamelizedString';\nimport { Workbench } from './interfaces/workbenches/Workbench';\nimport { scanForWorkbenches, workbenches } from './Workbenches';\nimport { randomUUID } from 'crypto';\nimport getRootPath from './utils/GetRootPath';\nimport path from 'path';\nimport { WorkbenchRequest } from './interfaces/workbenches/requests/WorkbenchRequest';\nimport { WorkbenchCollection } from './interfaces/workbenches/collections/WorkbenchCollection';\nimport { readFileSync } from 'fs';\nimport { getWebviewUri } from './utils/GetWebviewUri';\nimport getWebviewNonce from './utils/GetWebviewNonce';\nimport { RequestWebviewPanel } from './panels/RequestWebviewPanel';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"integrationworkbench\" is now active!');\n\n\tconst workbenchesTreeDataProvider = new WorkbenchTreeDataProvider(context);\n\t\n\tconst workbenchTreeView = vscode.window.createTreeView('workbenches', {\n\t\ttreeDataProvider: workbenchesTreeDataProvider\n\t});\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.createWorkbench', async () => {\n\t\tvscode.window.showInformationMessage('Create workbench');\n\n\t\tconst name = await vscode.window.showInputBox({\n\t\t\tplaceHolder: \"Enter the name of this workbench:\",\n\n\t\t\tvalidateInput(value) {\n\t\t\t\tif(!value.length) {\n\t\t\t\t\treturn \"You must enter a name for this workbench!\";\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\t\t});\n\n\t\tif(!name) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst storageOption = await getWorkbenchStorageOption(context, name);\n\n\t\tif(!storageOption) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uniqueWorkbenchPath = getUniqueFolderPath(storageOption.path, getCamelizedString(name));\n\n\t\tif(!uniqueWorkbenchPath) {\n\t\t\tvscode.window.showErrorMessage(\"There is too many workbenches with the same name in this storage option, please choose a different name.\");\n\t\n\t\t\treturn null;\n\t\t}\n\n\t\tconst rootPath = getRootPath();\n\n\t\tconst workbench = new Workbench({\n\t\t\tname,\n\t\t\tstorage: {\n\t\t\t\tlocation: storageOption.location,\n\t\t\t\tbase: (rootPath)?(path.basename(rootPath)):(undefined)\n\t\t\t},\n\t\t\tcollections: []\n\t\t}, uniqueWorkbenchPath);\n\n\t\tworkbench.save();\n\n\t\tworkbenches.push(workbench);\n\n\t\tworkbenchesTreeDataProvider.refresh();\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.createCollection', (reference) => {\n\t\tvscode.window.showInformationMessage('Create collection');\n\n\t\tvscode.window.showInputBox({\n\t\t\tprompt: \"Enter a collection name\",\n\t\t\tvalidateInput(value) {\n\t\t\t\tif(!value.length) {\n\t\t\t\t\treturn \"You must enter a collection name or cancel.\";\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\t\t}).then((value) => {\n\t\t\tif(!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(reference instanceof WorkbenchTreeItem) {\n\t\t\t\treference.workbench.collections.push({\n\t\t\t\t\tname: value,\n\t\t\t\t\trequests: []\n\t\t\t\t});\n\n\t\t\t\treference.workbench.save();\n\n\t\t\t\tworkbenchesTreeDataProvider.refresh();\n\t\t\t}\n\t\t});\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.createRequest', (reference) => {\n\t\tvscode.window.showInformationMessage('Create request');\n\n\t\tvscode.window.showInputBox({\n\t\t\tprompt: \"Enter the request name\",\n\t\t\tvalidateInput(value) {\n\t\t\t\tif(!value.length) {\n\t\t\t\t\treturn \"You must enter a name or cancel.\";\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\t\t}).then((value) => {\n\t\t\tif(!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(reference instanceof WorkbenchCollectionTreeItem) {\n\t\t\t\treference.collection.requests.push({\n\t\t\t\t\tid: randomUUID(),\n\t\t\t\t\tname: value,\n\t\t\t\t\ttype: null\n\t\t\t\t});\n\n\t\t\t\treference.workbench.save();\n\n\t\t\t\tworkbenchesTreeDataProvider.refresh();\n\t\t\t}\n\t\t});\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.openRequest', (\n\t\tworkbench: Workbench,\n\t\trequest: WorkbenchRequest,\n\t\tcollection?: WorkbenchCollection\n\t\t) => {\n\t\tif(!request.webviewPanel) {\n\t\t\trequest.webviewPanel = new RequestWebviewPanel(context, workbench, request, collection);\n\t\t}\n\t\telse {\n\t\t\trequest.webviewPanel.reveal();\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.refresh', () => {\n\t\tworkbenchesTreeDataProvider.refresh();\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('integrationWorkbench.openWalkthrough', () => {\n\t\tvscode.commands.executeCommand(`workbench.action.openWalkthrough`, `nora-soderlund.integrationWorkbench#workbenches.openWorkbenches`, false);\n\t}));\n\n\tscanForWorkbenches(context);\n\n\t//vscode.window.registerTreeDataProvider('workbenches', new WorkbenchTreeDataProvider(rootPath));\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n", "import { window, TreeDataProvider, TreeItem, Event, EventEmitter, ExtensionContext } from 'vscode';\nimport WorkbenchTreeItem from './items/WorkbenchTreeItem';\nimport WorkbenchRequestTreeItem from './items/WorkbenchRequestTreeItem';\nimport WorkbenchCollectionTreeItem from './items/WorkbenchCollectionTreeItem';\nimport { Workbench } from '../interfaces/workbenches/Workbench';\nimport { scanForWorkbenches, workbenches } from '../Workbenches';\n\nexport default class WorkbenchTreeDataProvider implements TreeDataProvider<WorkbenchTreeItem> {\n  constructor(\n    private readonly context: ExtensionContext\n  ) {\n\n  }\n\n  getTreeItem(element: WorkbenchTreeItem): TreeItem {\n    return element;\n  }\n\n  getChildren(element?: WorkbenchTreeItem): Thenable<WorkbenchTreeItem[]> {\n    if (!element) {\n      return Promise.resolve(\n        scanForWorkbenches(this.context, false).map((workbench) =>\n          new WorkbenchTreeItem(workbench)\n        )\n      );\n    }\n    else {\n      if (element instanceof WorkbenchCollectionTreeItem) {\n        return Promise.resolve(\n          element.collection.requests.map((request) => (\n            new WorkbenchRequestTreeItem(element.workbench, request, element.collection)\n          ))\n        );\n      }\n      else if (element instanceof WorkbenchTreeItem) {\n        return Promise.resolve(\n          element.workbench.collections.map((collection) => (\n            new WorkbenchCollectionTreeItem(element.workbench, collection)\n          ))\n        );\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  private _onDidChangeTreeData: EventEmitter<WorkbenchTreeItem | undefined | null | void> = new EventEmitter<WorkbenchTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: Event<WorkbenchTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n}\n", "import { TabInputWebview, ThemeIcon, TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport { Workbench } from \"../../interfaces/workbenches/Workbench\";\nimport path from \"path\";\n\nexport default class WorkbenchTreeItem extends TreeItem {\n    constructor(\n      public readonly workbench: Workbench\n    ) {\n      super(workbench.name, TreeItemCollapsibleState.Expanded);\n      \n      this.tooltip = `${workbench.name} workbench`;\n      this.description = workbench.storage.base;\n\n      this.contextValue = \"workbench\";\n    }\n}", "import { ThemeIcon, TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport WorkbenchTreeItem from \"./WorkbenchTreeItem\";\nimport { Workbench } from \"../../interfaces/workbenches/Workbench\";\nimport { WorkbenchRequest } from \"../../interfaces/workbenches/requests/WorkbenchRequest\";\nimport { WorkbenchCollection } from \"../../interfaces/workbenches/collections/WorkbenchCollection\";\nimport path from \"path\";\nimport { existsSync } from \"fs\";\n\nexport default class WorkbenchRequestTreeItem extends TreeItem implements WorkbenchTreeItem {\n    constructor(\n        public readonly workbench: Workbench,\n        public readonly request: WorkbenchRequest,\n        public readonly collection?: WorkbenchCollection\n    ) {\n        super(request.name, TreeItemCollapsibleState.None);\n        \n        this.tooltip = `${request.name} request`;\n     \n        this.iconPath = this.getIconPath();\n\n        this.command = {\n            title: \"Open request\",\n            command: \"integrationWorkbench.openRequest\",\n            arguments: [ workbench, request, collection ]\n        };\n    }\n\n    getIconPath() {\n        if(this.request.type === \"HTTP\") {\n            const iconPath = path.join(__filename, '..', '..', '..', '..', 'resources', 'icons', 'methods', `${this.request.details.method}.png`);\n\n            if(existsSync(iconPath)) {\n                return {\n                    light: iconPath,\n                    dark: iconPath\n                };\n            }\n        }\n\n        return new ThemeIcon(\"search-show-context\");\n    }\n}\n", "import { ThemeIcon, TreeItem, TreeItemCollapsibleState } from \"vscode\";\nimport WorkbenchTreeItem from \"./WorkbenchTreeItem\";\nimport { Workbench } from \"../../interfaces/workbenches/Workbench\";\nimport { WorkbenchCollection } from \"../../interfaces/workbenches/collections/WorkbenchCollection\";\n\nexport default class WorkbenchCollectionTreeItem extends TreeItem implements WorkbenchTreeItem {\n    constructor(\n        public readonly workbench: Workbench,\n        public readonly collection: WorkbenchCollection\n    ) {\n      super(collection.name, TreeItemCollapsibleState.Expanded);\n      this.tooltip = `${collection.name} collection`;\n\n      this.contextValue = \"collection\";\n    }\n  \n    iconPath = new ThemeIcon(\"folder\");\n}\n", "import { ExtensionContext, commands } from \"vscode\";\nimport { Workbench } from \"./interfaces/workbenches/Workbench\";\nimport { existsSync, readFileSync, readdirSync } from \"fs\";\nimport path from \"path\";\nimport getRootPath from \"./utils/GetRootPath\";\n\nexport const workbenches: Workbench[] = [];\n\nexport function scanForWorkbenches(context: ExtensionContext, refresh: boolean = true) {\n  const folders: string[] = [];\n\n  const rootPaths = [\n    context.globalStorageUri.fsPath,\n    getRootPath()\n  ];\n\n  for(let rootPath of rootPaths) {\n    if(!rootPath) {\n      continue;\n    }\n\n    if(!existsSync(path.join(rootPath, \".workbench\"))) {\n      continue;\n    }\n\n    const files = readdirSync(path.join(rootPath, \".workbench\"));\n\n    for(let file of files) {\n      if(existsSync(path.join(rootPath, \".workbench\", file, \"workbench.json\"))) {\n        folders.push(path.join(rootPath, \".workbench\", file));\n      }\n    }\n  }\n\n  workbenches.length = 0;\n  workbenches.push(...folders.map((folder) => {\n    const content = readFileSync(path.join(folder, \"workbench.json\"), {\n      encoding: \"utf-8\"\n    });\n\n    const input = JSON.parse(content);\n\n    return new Workbench(input, folder);\n  }));\n\n  if(refresh) {\n    commands.executeCommand(`integrationWorkbench.refresh`);\n  }\n\n  return workbenches;\n};\n", "import { existsSync, mkdirSync, writeFileSync } from \"fs\";\nimport { WorkbenchInput } from \"./WorkbenchInput\";\nimport { WorkbenchStorage } from \"./WorkbenchStorage\";\nimport { WorkbenchCollection } from \"./collections/WorkbenchCollection\";\nimport { window } from \"vscode\";\nimport path from \"path\";\n\nexport class Workbench {\n    name: string;\n    storage: WorkbenchStorage;\n    collections: WorkbenchCollection[];\n\n    constructor(input: WorkbenchInput, private readonly path: string) {\n        this.name = input.name;\n        this.storage = input.storage;\n        this.collections = input.collections;\n    };\n\n    getMetadataPath() {\n        return path.join(this.path, \"workbench.json\");\n    }\n\n    save() {\n        try {\n            if(!existsSync(this.path)) {\n                mkdirSync(this.path, {\n                    recursive: true\n                });\n            }\n        }\n        catch(error) {\n            window.showErrorMessage(\"VS Code may not have permissions to create files in the current workspace folder:\\n\\n\" + error);\n        }\n\n        try {\n            writeFileSync(this.getMetadataPath(), JSON.stringify({\n                name: this.name,\n                storage: this.storage,\n                collections: this.collections.map((collection) => {\n                    return {\n                        name: collection.name,  \n                        requests: collection.requests.map((request) => {\n                            const clonedRequest = { ...request };\n\n                            delete clonedRequest.webviewPanel;\n\n                            return clonedRequest;\n                        }) \n                    };\n                })\n            }, undefined, 2));\n        }\n        catch(error) {\n            window.showErrorMessage(`Failed to save workbench '${this.name}':\\n\\n` + error);\n        }\n    };\n};\n", "import { workspace } from \"vscode\";\n\nexport default function getRootPath() {\n  if(workspace.workspaceFolders?.length) {\n    return workspace.workspaceFolders[0].uri.fsPath;\n  }\n\n  return undefined;\n};\n", "import { ExtensionContext, Uri, window, workspace } from \"vscode\";\nimport { DefaultWorkbenchStorage } from \"../interfaces/configuration/DefaultWorkbenchStorage\";\nimport getRootPath from \"./GetRootPath\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport path from \"path\";\n\nexport default async function getWorkbenchStorageOption(context: ExtensionContext, name: string) {\n  let workbenchStorage = workspace.getConfiguration(\"integrationWorkbench\").get<DefaultWorkbenchStorage>(\"defaultWorkbenchStorage\");\n  let workbenchStoragePath: Uri;\n\n  if(!workbenchStorage || workbenchStorage === \"prompt\") {\n\t\tconst options = [\n\t\t\t\"Repository workbench (stored in the repository filesystem)\",\n\t\t\t\"User workbench (stored in the VS Code user storage)\"\n\t\t];\n\n    const result = await window.showQuickPick(options, {\n\t\t\tcanPickMany: false,\n\t\t\tplaceHolder: \"Select where the workbench files should be saved:\"\n\t\t});\n\n    if(!result) {\n      return null;\n    }\n\n    switch(result) {\n      case \"Repository workbench (stored in the repository filesystem)\": {\n        workbenchStorage = \"repository\";\n\n        break;\n      }\n\n      case \"User workbench (stored in the VS Code user storage)\": {\n        workbenchStorage = \"user\";\n\n        break;\n      }\n\n      default:\n        throw new Error(\"Unexpected result from workbench storage option was given: \" + result);\n    }\n  }\n\n  if(workbenchStorage === \"repository\") {\n    /*const result = await window.showOpenDialog({\n      canSelectFiles: false,\n      canSelectFolders: true,\n      canSelectMany: false,\n      openLabel: \"Select\",\n      title: \"Where do you want the workbench files to be saved?\"\n    });*/\n\n    const rootPath = getRootPath();\n\n    if(!rootPath) {\n      const result = await window.showSaveDialog({\n        defaultUri: Uri.file(`/.workbench/${name.toLocaleLowerCase()}/`),\n        saveLabel: \"Select\"\n      });\n\n      if(!result) {\n        return null;\n      }\n\n      workbenchStoragePath = result;\n    }\n    else {\n      workbenchStoragePath = Uri.file(rootPath);\n    }\n  }\n  else if(workbenchStorage === \"user\") {\n    workbenchStoragePath = context.globalStorageUri;\n  }\n  else {\n    throw new Error(\"Invalid workbench storage option was given: \" + workbenchStorage);\n  }\n\n  const workbenchesPath = path.join(workbenchStoragePath.fsPath, \".workbench/\");\n\n  try {\n    if(!existsSync(workbenchesPath)) {\n      mkdirSync(workbenchesPath, {\n        recursive: true\n      });\n    }\n  }\n  catch(error) {\n    window.showErrorMessage(\"VS Code may not have permissions to create files in the current workspace folder:\\n\\n\" + error);\n\n    return null;\n  }\n\n  return {\n    location: workbenchStorage,\n    path: workbenchesPath\n  };\n}\n", "import { existsSync } from \"fs\";\nimport path from \"path\";\nimport { window, workspace } from \"vscode\";\n\nexport default function getUniqueFolderPath(rootPath: string, folderName: string) {\n  let currentPath = path.join(rootPath, folderName);\n\n  if(!existsSync(currentPath)) {\n    return currentPath;\n  }\n\n  for(let index = 1; index < 20; index++) {\n    currentPath = path.join(rootPath, folderName + \"-\" + index);\n\n    if(!existsSync(currentPath)) {\n      return currentPath;\n    }\n  }\n\n  return null;\n}\n", "// Authored by Christian C. Salvad\u00F3\n// https://stackoverflow.com/a/2970667/20073186\nexport default function getCamelizedString(string: string) {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n    if(index === 0) {\n      return word.toLowerCase();\n    }\n\n    return word.toUpperCase();\n  }).replace(/\\s+/g, '');\n};\n", "import { Disposable, ExtensionContext, Uri, ViewColumn, WebviewPanel, window } from \"vscode\";\nimport { Workbench } from \"../interfaces/workbenches/Workbench\";\nimport { WorkbenchRequest } from \"../interfaces/workbenches/requests/WorkbenchRequest\";\nimport { WorkbenchCollection } from \"../interfaces/workbenches/collections/WorkbenchCollection\";\nimport { getWebviewUri } from \"../utils/GetWebviewUri\";\nimport getWebviewNonce from \"../utils/GetWebviewNonce\";\nimport { readFileSync } from \"fs\";\nimport path from \"path\";\n\nexport class RequestWebviewPanel {\n  private readonly webviewPanel: WebviewPanel;\n  private readonly disposables: Disposable[] = [];\n\n  constructor(\n    private readonly context: ExtensionContext,\n    private readonly workbench: Workbench,\n\t\tprivate readonly request: WorkbenchRequest,\n\t\tprivate readonly collection?: WorkbenchCollection\n  ) {\n    this.webviewPanel = window.createWebviewPanel(\n      `request-${request.id}`,\n      request.name,\n      ViewColumn.One,\n      {\n        enableScripts: true,\n\n        localResourceRoots: [Uri.joinPath(context.extensionUri, 'build')]\n      }\n    );\n\n    this.webviewPanel.onDidDispose(() => this.dispose(), null, this.disposables);\n\n    const webviewUri = getWebviewUri(this.webviewPanel.webview, context.extensionUri, [\"build\", \"webview.js\"]);\n    const nonce = getWebviewNonce();\n\n    this.webviewPanel.webview.html = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n          <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src 'nonce-${nonce}';\">\n\n          <title>Hello World!</title>\n        </head>\n        <body>\n          ${readFileSync(\n            path.join(__filename, \"..\", \"..\", \"resources\", \"request\", \"index.html\"),\n            {\n              encoding: \"utf-8\"\n            }\n          )}\n\n          <script type=\"module\" nonce=\"${nonce}\" src=\"${webviewUri}\"></script>\n        </body>\n      </html>\n    `;\n\n\n    this.webviewPanel.webview.onDidReceiveMessage(\n      (message: any) => {\n        const command = message.command;\n        const text = message.text;\n\n        switch (command) {\n          case \"hello\":\n            window.showInformationMessage(text);\n            return;\n        }\n      },\n      undefined,\n      this.disposables\n    );\n  }\n\n  reveal() {\n    const columnToShowIn = window.activeTextEditor ? window.activeTextEditor.viewColumn : undefined;\n\n    this.webviewPanel.reveal(columnToShowIn);\n  }\n\n  dispose() {\n    this.webviewPanel.dispose();\n\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}", "import { Uri, Webview } from \"vscode\";\n\nexport function getWebviewUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n}\n", "export default function getWebviewNonce() {\n  let text = \"\";\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n"],
  "mappings": "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",
  "names": ["import_vscode", "import_vscode", "path", "import_vscode", "import_vscode", "import_fs", "import_vscode", "import_path", "path", "import_fs", "import_path", "import_vscode", "path", "import_vscode", "import_fs", "import_path", "path", "import_fs", "import_path", "path", "import_path", "import_vscode", "import_vscode", "import_fs", "import_path", "path", "path"]
}
